-- Deploy PiWS:001 to pg

BEGIN;

CREATE SCHEMA piws;
CREATE SCHEMA sensor;

CREATE TABLE sensor.value_type
(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,
    CONSTRAINT PK_value_type_id PRIMARY KEY (id),
    CONSTRAINT UQ_sensor_value_type_name UNIQUE (name)
);

INSERT INTO sensor.value_type (name) VALUES ('Temperature'), ('Humidity');


CREATE TABLE sensor.value_unit
(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,
    CONSTRAINT PK_value_unit_id PRIMARY KEY (id),
    CONSTRAINT UQ_sensor_value_unit_name UNIQUE (name)
);

INSERT INTO sensor.value_unit (name) VALUES ('C'), ('%');



CREATE TABLE sensor.node_model
(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,
    column_name TEXT NOT NULL,
    value_type_id INT NOT NULL,
    value_unit_id INT NOT NULL,
    CONSTRAINT PK_node_model_id PRIMARY KEY (id),
    CONSTRAINT FK_node_model_value_type_id
        FOREIGN KEY (value_type_id) REFERENCES sensor.value_type (id),
    CONSTRAINT FK_node_model_value_unit_id
        FOREIGN KEY (value_unit_id) REFERENCES sensor.value_unit (id),
    CONSTRAINT UQ_sensor_node_model_name UNIQUE (name)
);


INSERT INTO sensor.node_model (name, column_name, value_type_id, value_unit_id)
SELECT 'DHT-11 (T)', 'dht11_t', vt.id, vu.id
    FROM sensor.value_type vt
    INNER JOIN sensor.value_unit vu ON 1 = 1
    WHERE vt.name = 'Temperature'
        AND vu.name = 'C'
;


INSERT INTO sensor.node_model (name, column_name, value_type_id, value_unit_id)
SELECT 'DHT-11 (H)', 'dht11_h', vt.id, vu.id
    FROM sensor.value_type vt
    INNER JOIN sensor.value_unit vu ON 1 = 1
    WHERE vt.name = 'Humidity'
        AND vu.name = '%'
;


INSERT INTO sensor.node_model (name, column_name, value_type_id, value_unit_id)
SELECT 'DS18B20', 'ds18b20_t', vt.id, vu.id
    FROM sensor.value_type vt
    INNER JOIN sensor.value_unit vu ON 1 = 1
    WHERE vt.name = 'Temperature'
        AND vu.name = 'C'
;



CREATE TABLE piws.observation_raw
(
	id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	observe_date TIMESTAMPTZ NOT NULL,
	sensor_values JSONB NOT NULL,
	imported bool NOT NULL DEFAULT False,
	CONSTRAINT pk_observation_raw_id PRIMARY KEY (id)
);
CREATE INDEX ix_piws_observation_raw_observe_date 
	ON piws.observation_raw (observe_date);
CREATE INDEX ix_piws_observation_raw_not_imported
	ON piws.observation_raw (imported)
	WHERE imported IS NULL;


COMMENT ON TABLE piws.observation_raw IS 'Stores raw PiWS sensor readings in JSONB format.  Use for real-time monitoring and populates piws.observation table.';


CREATE TABLE piws.observation
(
	id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	observe_date TIMESTAMPTZ NOT NULL,
	node_model_id INT NOT NULL,
	sensor_value NUMERIC(12,6) NOT NULL,
	node_unique_id TEXT NULL,
	imported bool NOT NULL DEFAULT False,
	CONSTRAINT pk_observation_id PRIMARY KEY (id),
	CONSTRAINT fk_observation_node_model_id
		FOREIGN KEY (node_model_id) REFERENCES sensor.node_model (id)
);

CREATE INDEX ix_piws_observation_observe_date 
	ON piws.observation (observe_date);

CREATE INDEX ix_piws_observation_not_imported
	ON piws.observation (imported)
	WHERE imported IS NULL;


-----------------------------------------



CREATE VIEW piws.minute_obs_ds18b20t AS
WITH unflatten AS (
SELECT u.id, u.observe_date,
		u.imported,
		jsonb_object_keys(observation_rows)
			AS node_unique_id,
		(observation_rows->>jsonb_object_keys(observation_rows))::NUMERIC
			AS sensor_value
	FROM (SELECT o.id, o.observe_date, o.imported,
				jsonb_array_elements(o.sensor_values -> 'ds18b20_t_uq')
					AS observation_rows
			FROM piws.observation_raw o
			WHERE o.sensor_values ->> 'ds18b20_t_uq' IS NOT NULL
		) u
), stack AS (
SELECT o.id, o.observe_date, o.imported,
        (o.sensor_values ->> 'ds18b20_t')::NUMERIC AS sensor_value,
        NULL AS node_unique_id
    FROM piws.observation_raw o
    WHERE (o.sensor_values ->> 'ds18b20_t')::NUMERIC <> -127
UNION 
SELECT o.id, o.observe_date, o.imported,
		o.sensor_value,
		o.node_unique_id
	FROM unflatten o 
	WHERE o.sensor_value != -127
)
SELECT date_trunc('minute', s.observe_date) AS observe_date,
		nm.id AS node_model_id,
		nm.column_name AS sensor_name,
		s.node_unique_id,
		s.imported,
		AVG(s.sensor_value) AS sensor_value
	FROM stack s
	INNER JOIN sensor.node_model nm ON column_name = 'ds18b20_t'
	GROUP BY date_trunc('minute', s.observe_date),
		nm.id, nm.column_name, s.node_unique_id, s.imported
;



CREATE VIEW piws.minute_obs_dht11 AS
WITH stack AS (
SELECT o.id, o.observe_date, 
		nm.id AS node_model_id, nm.column_name AS sensor_name,
        (o.sensor_values ->> 'dht11_h')::NUMERIC AS sensor_value,
        NULL AS node_unique_id, o.imported
	FROM piws.observation_raw o
	INNER JOIN sensor.node_model nm ON column_name = 'dht11_h'
UNION
SELECT o.id, o.observe_date,
		nm.id AS node_model_id, nm.column_name AS sensor_name,
        (o.sensor_values ->> 'dht11_t')::NUMERIC AS sensor_value,
        NULL AS node_unique_id, o.imported
	FROM piws.observation_raw o
	INNER JOIN sensor.node_model nm ON column_name = 'dht11_t'
)
SELECT date_trunc('minute', s.observe_date) AS observe_date,
		s.node_model_id, s.sensor_name, s.node_unique_id,
		s.imported,
		AVG(s.sensor_value) AS sensor_value
	FROM stack s
	GROUP BY date_trunc('minute', s.observe_date),
		s.node_model_id, s.sensor_name, s.node_unique_id,
		s.imported
;




CREATE FUNCTION piws.load_raw_observations()
 RETURNS BOOLEAN
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO 'piws, pg_temp'
AS $function$

	WITH stack AS (
	SELECT observe_date, node_model_id, sensor_value, node_unique_id
		FROM piws.minute_obs_ds18b20t
		WHERE NOT imported 
			AND date_trunc('minute', observe_date) < date_trunc('minute', NOW())
	UNION
	SELECT observe_date, node_model_id, sensor_value, node_unique_id
		FROM piws.minute_obs_dht11
		WHERE NOT imported
			AND date_trunc('minute', observe_date) < date_trunc('minute', NOW())
	), ins AS (
	INSERT INTO piws.observation 
			(observe_date, node_model_id,
			sensor_value, node_unique_id)	
	SELECT * 
		FROM stack
	)
	UPDATE piws.observation_raw r
		SET imported = True 
		FROM stack s
		WHERE date_trunc('minute', r.observe_date) = s.observe_date 

	;

	SELECT True;

$function$
;




CREATE FUNCTION piws.clean_raw_observations(num_hours INT = 24)
 RETURNS BOOLEAN
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO 'piws, pg_temp'
AS $function$

	DELETE FROM piws.observation_raw
		WHERE imported
			AND NOW() - $1 * INTERVAL '1 hours' > observe_date;

	SELECT True;
$function$
;





CREATE FUNCTION piws.insert_observation(
        obs_date TIMESTAMPTZ, sensor_values JSONB)
 RETURNS BIGINT
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO 'piws, pg_temp'
AS $function$

    INSERT INTO piws.observation_raw (observe_date, sensor_values)
        VALUES ($1, $2)
        RETURNING id

$function$
;



CREATE VIEW piws.vobservation AS
SELECT o.id, o.observe_date, nm.column_name AS sensor_name,
        o.sensor_value, o.node_unique_id, o.imported
    FROM piws.observation o
    INNER JOIN sensor.node_model nm
        ON o.node_model_id = nm.id
;

CREATE FUNCTION piws.api_json()
 RETURNS TABLE(observation_data json)
 LANGUAGE sql
 SECURITY DEFINER ROWS 25
 SET search_path TO 'piws, pg_temp'
AS $function$

    WITH d AS (
        SELECT id, observe_date, sensor_name, node_unique_id,
                ROUND(sensor_value, 2) AS sensor_value
            FROM piws.vobservation
            WHERE NOT imported
            ORDER BY observe_date DESC
            LIMIT 25
        )
    SELECT row_to_json(d)
        FROM d

$function$
;



CREATE FUNCTION piws.mark_submitted(id BIGINT)
 RETURNS BOOLEAN
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO 'piws, pg_temp'
AS $function$

    UPDATE piws.observation 
        SET imported = True 
        WHERE id = $1
    ;
    SELECT True

$function$
;





COMMIT;
