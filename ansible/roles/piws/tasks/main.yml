---


- name: "Ensure directory {{ repo_path }} exists"
  file:
    path: "{{ repo_path }}"
    state: directory
    mode: 0755


- name: "Sync paths to target server at path {{ repo_path}}"
  copy:
    src: "../../../{{ item }}"
    dest: "{{ repo_path }}/{{ item }}"
  with_items:
    - piws/
    - db/
    - run_station.py
    - requirements.txt
    - LICENSE
    - README.md


- name: "Clone PostgreSQL Data Dictionary (pgdd) Repository."
  git:
    repo: "{{ repo_url_pgdd }}"
    dest: "{{ repo_path_pgdd }}"
    version: "{{ repo_branch_pgdd }}"
    key_file: "{{ ssh_path }}/id_rsa"
    accept_hostkey: yes
    force: yes


- name: Create piws database
  postgresql_db:
    name: "{{ piws_db_name }}"
    encoding: UTF-8
    template: template0
  become_user: postgres

- name: Install pgdd extension
  shell: "make install"
  args:
    chdir: "{{ repo_path_pgdd }}"


- name: "Create pgdd extension"
  command: "psql -d {{ piws_db_name }} -c \" CREATE EXTENSION IF NOT EXISTS pgdd;  \" "
  become_user: postgres
  become: yes


- name: Create piws Database user
  postgresql_user:
    db: "{{ piws_db_name }}"
    name: "{{ piws_db_user }}"
    password: "{{ piws_db_password }}"
    priv: "ALL"
  become_user: postgres


- name: "Allow {{ piws_db_user }} user USAGE dd schema"
  command: "psql -d {{ piws_db_name }} -c \" GRANT USAGE ON SCHEMA dd TO {{ piws_db_user }};  \" "
  become_user: postgres
  become: yes


- name: "Allow {{ piws_db_user }} user full permissions on tables in dd schema"
  command: "psql -d {{ piws_db_name }} -c \" GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA dd TO {{ piws_db_user }};  \" "
  become_user: postgres
  become: yes


- name: "Allow {{ piws_db_user }} user access to sequences in dd schema"
  command: "psql -d {{ piws_db_name }} -c \" GRANT USAGE ON ALL SEQUENCES IN SCHEMA dd TO {{ piws_db_user }};  \" "
  become_user: postgres
  become: yes


# Note:  Added PGOPTIONS.... before sqitch command to fix issue with delta 004 that cropped up today RE non-fully qualified schemas...
- name: Deploy database using Sqitch
  shell: "PGOPTIONS='-c search_path=piws,public' sqitch deploy db:pg://{{ piws_db_user }}:{{ piws_db_password }}@{{ piws_db_ip }}:5432/{{ piws_db_name }}"
  args:
    chdir: "{{ repo_path }}/db"



- name: Verify database using Sqitch
  shell: "sqitch verify db:pg://{{ piws_db_user }}:{{ piws_db_password }}@{{ piws_db_ip }}:5432/{{ piws_db_name }}"
  args:
    chdir: "{{ repo_path }}/db"


- name: Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip


- name: "Setup {{ python_version }} venv for running the site from requirements file: {{ repo_path  }}/requirements.txt "
  pip:
    virtualenv: "{{ venv_path }}"
    virtualenv_python: "{{ python_version }}"
    requirements: "{{ repo_path }}/requirements.txt"
    state: present



- name: "Remove old piws/ directory"
  file:
    path: "{{ venv_path }}/bin/piws/"
    state: absent


- name: "Copy files to venv/bin folder for server to run.  "
  command: "cp -r {{ repo_path }}/{{ item }} {{ venv_path }}/bin/"
  with_items:
   - "run_station.py"
   - "piws/"
  args:
    chdir: "{{ repo_path }}"


- name: "Set piws as owner to directory"
  file:
    path: "{{ venv_path }}/bin"
    recurse: yes
    owner: "piws"
    group: "piws"
    mode: 0770


- name: Ensure log directory exists
  file:
    path: /var/log/piws
    state: directory
    owner: piws
    group: piws
    mode: 0775


- name: "Ensure log file exists and is owned by piws"
  file:
    path: /var/log/piws/piws.log
    state: touch
    owner: piws
    group: piws
    mode: 0660


- name: "Setup Service (systemd) for piws"
  template:
    src: piws.service.j2
    dest: "/etc/systemd/system/piws.service"
    owner: piws
    group: piws
    mode: 0775


- name: Setup EnvironmentFile for service and its secrets.
  template:
    src: piws.env.j2
    dest: "{{ venv_path }}/bin/piws.env"
    owner: "piws"
    group: "piws"
    mode: 0440


- name: Enable service (systemctl)
  command: "systemctl enable piws"
  notify:
    - "Restart PiWS service"



- name: Schedule crontab to load raw observations to main observation table
  cron:
    name: "PiWS-LoadRawObservations"
    minute: "*"
    job: "/usr/bin/psql -d {{ piws_db_name }} -c 'SELECT * FROM piws.load_raw_observations()' "
    state: present
  become_user: postgres


- name: Schedule crontab to clear old and imported raw observations
  cron:
    name: "PiWS-ClearRawObservations"
    minute: "8"
    hour: "*"
    job: "/usr/bin/psql -d {{ piws_db_name }} -c 'SELECT * FROM piws.clean_raw_observations()' "
    state: present
  become_user: postgres



...